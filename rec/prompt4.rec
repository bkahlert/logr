#!/usr/bin/env bash

source logr.sh

# Creates and executes an expect script that is passed via STDIN.
expect() {
  local expect_script && expect_script="$(mktemp "${TMPDIR%/}/script.exp-XXXXXX")"
  echo '#!/usr/bin/expect' >"$expect_script"
  cat - >>"$expect_script"
  chmod +x "$expect_script"
  "$expect_script"
}

# shellcheck disable=SC2059
logr_script() {
  local script && script="$(mktemp "${TMPDIR%/}/script.bash-XXXXXX")"
  cat <<SCRIPT >"$script"
#!/usr/bin/env bash
source logr.sh
$*
SCRIPT
  chmod +x "$script"
  echo "$script"
}

# Invokes an expect script that used the first argument
# to answer the prompt created by running the remaining arguments.
run_prompt() {
  local input=${1?input missing} script quoted
  shift
  quoted=$(printf "'%s' " "$@")
  script=$(logr_script "$quoted")
  local e='echo'
  expect <<EXPECT
set timeout 2
log_user 1
spawn -no$e "$script"
expect "*\[Y/n\]*"
send "$input"
expect {
 "yes"  { exit 0 }
 "no" { exit 10 }
 eof
}
foreach { pid spawn_id os_error_flag value } [wait] break

if {"${os_error_flag-}" == 0} {
  puts "exit status: ${value-}"
  exit "${value-}"
} else {
  puts "errno: ${value-}"
  exit "${value-}"
}
if [ "$input" = "y" ]; then
  expect "(\r\n)+"
else
  eof
fi
EXPECT
}
rec -2 run_prompt y prompt4 Y/n
rec -2 run_prompt y prompt4 Y/n "Single line"
rec -2 run_prompt y prompt4 Y/n "%s\n" "Multi-" "line"
rec -2 run_prompt y prompt4 Y/n "%s\n" "Multi-" "line" -
rec -2 run_prompt n prompt4 Y/n
rec -2 run_prompt n prompt4 Y/n "Single line"
rec -2 run_prompt n prompt4 Y/n "%s\n" "Multi-" "line"
rec -2 run_prompt n prompt4 Y/n "%s\n" "Multi-" "line" -
