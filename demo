#!/usr/bin/env bash
# bashsupport disable=BP5001

# shellcheck source=./logr.sh
source "$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)/logr.sh"

# Prints the specified text as a section headline.
# Arguments:
#   1 - headline
#   2 - separator
# bashsupport disable=BP5005
SECTION() {
  printf "\n\n ─────── %s %s\n\n" "$1" "${2//-/─}"
}

SECTION tput -------------------------------------------------------------------
# bashsupport disable=SpellCheckingInspection
printf '%s%s%s\n' "$(tput setaf 2)" "TERM=$TERM" "$(tput sgr0)"
(
  # shellcheck disable=SC2030
  # bashsupport disable=BP5006
  TERM_OVERRIDE=''
  printf '%s%s%s\n' "$(tput setaf 2)" "TERM_OVERRIDE=$TERM_OVERRIDE" "$(tput sgr0)"
)

SECTION failr ------------------------------------------------------------------
(failr) || true
(failr --) || true
(
  # bashsupport disable=BP5008
  foo() {
    [[ $1 == "baz" ]] || failr "baz expected" -u "baz" -- "$*"
  }
  foo bar
) || true

SECTION "util: inline" ---------------------------------------------------------
util -n inline 'foo'
util -n inline '
foo
bar
'
util -n inline '
foo
bar
baz
'

SECTION "util: center" ---------------------------------------------------------
util center '' && echo "|"
util center '✘' && echo "|"
util center -w 2 '👐' && echo "|"
declare var
util center -v var '12' && echo "$var|"
util center '123' && echo "|"
util center '1234' && echo "|"

SECTION "util: icon" -----------------------------------------------------------
printf ' ' && util icon success
printf ' ' && util icon warn
printf ' ' && util icon -v var error && echo "$var"
printf '%s' '->' && util icon -c new && printf '%s\n' '<-'

SECTION "util: print_margin" ---------------------------------------------------
for i in 0 1 2 3 4 5; do
  printf '%d' "$i"
  sleep 0.05
  util print_margin "⠤⠶⠿"
  sleep 0.05
done
echo

SECTION "util: print_line" -----------------------------------------------------
util -n print_line -i success 'existing icon + text'
util -n print_line 'text only'
util -n print_line --icon not-exists 'not existing icon + text'

SECTION "util: print_line_end" -------------------------------------------------
util print_line -i success 'existing-icon + text' && sleep 0.3 && util print_line_end -n -i success " -> icon + text updated"
util print_line 'text-only' && sleep 0.3 && util print_line_end -n -i success
util print_line -i not-exists 'not-existing icon + text' && sleep 0.3 && util print_line_end -n " -> text updated"

SECTION "main" -----------------------------------------------------------------
printf "%sBRIGHT%s %sBLACK%s\n" "$LOGR_COLOR_FG_BRIGHT_BLACK" "$LOGR_RESET" "$LOGR_COLOR_FG_BLACK" "$LOGR_RESET"
printf "%sBRIGHT%s %sRED%s\n" "$LOGR_COLOR_FG_BRIGHT_RED" "$LOGR_RESET" "$LOGR_COLOR_FG_RED" "$LOGR_RESET"
printf "%sBRIGHT%s %sGREEN%s\n" "$LOGR_COLOR_FG_BRIGHT_GREEN" "$LOGR_RESET" "$LOGR_COLOR_FG_GREEN" "$LOGR_RESET"
printf "%sBRIGHT%s %sYELLOW%s\n" "$LOGR_COLOR_FG_BRIGHT_YELLOW" "$LOGR_RESET" "$LOGR_COLOR_FG_YELLOW" "$LOGR_RESET"
printf "%sBRIGHT%s %sBLUE%s\n" "$LOGR_COLOR_FG_BRIGHT_BLUE" "$LOGR_RESET" "$LOGR_COLOR_FG_BLUE" "$LOGR_RESET"
printf "%sBRIGHT%s %sMAGENTA%s\n" "$LOGR_COLOR_FG_BRIGHT_MAGENTA" "$LOGR_RESET" "$LOGR_COLOR_FG_MAGENTA" "$LOGR_RESET"
printf "%sBRIGHT%s %sCYAN%s\n" "$LOGR_COLOR_FG_BRIGHT_CYAN" "$LOGR_RESET" "$LOGR_COLOR_FG_CYAN" "$LOGR_RESET"
printf "%sBRIGHT%s %sWHITE%s\n" "$LOGR_COLOR_FG_BRIGHT_WHITE" "$LOGR_RESET" "$LOGR_COLOR_FG_WHITE" "$LOGR_RESET"

SECTION "logr" -----------------------------------------------------------------
logr new "new message"
logr item "item message"
logr list "list message" "list message" "list message"
logr link "https://github.com/bkahlert"
logr link "https://example.com" "link text"
logr file "logr.sh" --line 300 --column 10
logr success "success message"
logr info "info message"
logr warn "warn message"
logr error "error message"
logr fail "failr message" || true

logr task "task message"
logr task "task message and cmdline" -- sleep 2
logr task --warn-only -- exit 2
(logr task -- bash -c '
echo foo && sleep 1
echo bar >&2 && sleep 1
echo baz >&2 && sleep 1
exit 2
') || true

# TODO TEST
SECTION "spinner" --------------------------------------------------------------
util print_line -i item "<<<<<"
spinner start
sleep 2
spinner stop
util -n print_line -i success

util print_line -i item "<<<<<"
spinner start
sleep 2
spinner stop
util -n print_line_end success 'Done'

util print_line -i item "<<<<<"
spinner start
sleep 2
spinner stop
util -n print_line -i success 'Done'
exit 0
(failr) || true
#myf ab c
exit 0

# bashsupport disable=BP5001
set -euo pipefail

# TODO rename LOG_PATH
# TODO ko to die
# TODO embed scripts
# TODO color whole line when log_cmd finished
# TODO set animation with array
# TODO replace explicit escape sequences with tput


ok "sample: ok" || true
ko "sample: ko" || true
warn "sample: warn" || true
working "sample: working"
